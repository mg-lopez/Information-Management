-- Data Model for Online Bank

-- Create Customer Table
CREATE TABLE customer (
    id int GENERATED BY DEFAULT AS IDENTITY,
    fname VARCHAR(35) NOT NULL,
    lname VARCHAR(35) NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    gender VARCHAR(1) NOT NULL,
    date_of_birth DATE NOT NULL,
    street_addr VARCHAR(255) NOT NULL,
    house_addr VARCHAR(255),
    city VARCHAR(255) NOT NULL,
    postcode VARCHAR(12) NOT NULL,
    employment_status VARCHAR(10),
    income decimal(19,4) NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT gender_check CHECK (gender = ANY (ARRAY['F'::bpchar, 'M'::bpchar])), -- check user input, only valid 'F' for Female and 'M' for Male.
    CONSTRAINT employment_check CHECK (employment_status = ANY (ARRAY['Employed'::bpchar, 'Unemployed'::bpchar]))
);

-- Create Account Table
CREATE TABLE account (
    id int GENERATED BY DEFAULT AS IDENTITY,
    customer_id INTEGER NOT NULL,
    account_type varchar(7) NOT NULL,
    account_number int NOT NULL,
    short_code varchar(10) NOT NULL,
    card_number int NOT NULL,
    card_expiry DATE NOT NULL,
    card_cvv int NOT NULL,
    credit_limit decimal(19,4) NOT NULL,
    balance decimal(19,4) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    FOREIGN KEY (customer_id) REFERENCES customer(id) ON DELETE CASCADE,
    CONSTRAINT type_of_account CHECK (account_type = ANY (ARRAY['Savings'::bpchar, 'Current'::bpchar, 'Credit'::bpchar]))
);

-- Create Loan Application Table
CREATE TABLE loan_application (
    id int GENERATED BY DEFAULT AS IDENTITY,
    account_id INTEGER,
    date TIMESTAMP WITH TIME ZONE,
    requested_amount decimal(19,4),
    is_approved boolean NOT NULL,
    approved_amount decimal(19,4) NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE
);

-- Create Loan Payment Table
CREATE TABLE loan_payment (
    id int GENERATED BY DEFAULT AS IDENTITY,
    loan_application_id INTEGER,
    account_id INTEGER DEFAULT 0,
    loan_status varchar(8) NOT NULL,
    total_amount decimal(19,4) NOT NULL,
    repayment_frequency varchar(255),
    next_payment_date DATE,
    next_payment_amount decimal(19,4),
    last_payment_date DATE,
    outstanding_amount decimal(19,4) NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (loan_application_id) REFERENCES loan_application(id) ON DELETE CASCADE
);

-- Create Transfer Table
CREATE TABLE transfer (
    id int GENERATED BY DEFAULT AS IDENTITY,
    date TIMESTAMP WITH TIME ZONE NOT NULL,
    customer_id INTEGER,
    transfer_type varchar(255) NOT NULL,
    sender_id INTEGER NOT NULL,
    receiver_id INTEGER NOT NULL,
    amount decimal(19,4) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    FOREIGN KEY (customer_id) REFERENCES customer(id) ON DELETE CASCADE,
    FOREIGN KEY (sender_id) REFERENCES account(id),
    FOREIGN KEY (receiver_id) REFERENCES account(id),
    CONSTRAINT amount_check CHECK (amount > 0),
    CONSTRAINT valid_transfer UNIQUE (sender_id, receiver_id)
);

-- Roles

-- create the "manager" role
CREATE ROLE manager LOGIN password 'manager123';

-- grant the "manager" role the necessary privileges
GRANT ALL ON account TO manager;
GRANT ALL ON loan_application TO manager;
GRANT ALL ON loan_payment TO manager;
GRANT ALL ON transfer TO manager;

-- create the "customer" role
CREATE ROLE customer LOGIN password 'customer123';

-- grant the "customer" role the necessary privileges
GRANT SELECT ON account TO customer;
GRANT SELECT ON loan_application TO customer;
GRANT SELECT ON loan_payment TO customer;
GRANT INSERT, UPDATE ON transfer TO customer;

-- Functionality

-- Function to register a customer
CREATE OR REPLACE FUNCTION register_customer(
    first_name varchar(255), 
    last_name varchar(255), 
    email varchar(255), 
    phone varchar(255), 
    dob date
) RETURNS INTEGER AS $$
DECLARE
  customer_id INTEGER;
BEGIN
  INSERT INTO customer (first_name, last_name, email, phone, dob)
  VALUES (first_name, last_name, email, phone, dob)
  RETURNING id INTO customer_id;
  RETURN customer_id;
END;
$$ LANGUAGE plpgsql;

-- Function to allow customer to open a bank account
CREATE OR REPLACE FUNCTION open_account(
    customer_id INTEGER,
    account_type varchar(255),
    account_number INTEGER,
    short_code varchar(10), 
    card_number INTEGER, card_expiry DATE, card_cvv INTEGER, 
    credit_limit decimal(19,4)) 
RETURNS INTEGER AS $$
DECLARE
  account_id INTEGER;
BEGIN
  INSERT INTO account (
    customer_id, 
    account_type, 
    account_number, 
    short_code, 
    card_number, 
    card_expiry, 
    card_cvv, 
    credit_limit
) VALUES (
    customer_id,
    account_type,
    account_number,
    short_code, 
    card_number, 
    card_expiry, 
    card_cvv, 
    credit_limit
) RETURNING id INTO account_id;
    RETURN account_id;
END;
$$ LANGUAGE plpgsql;

-- Function to allow the user to view balance
CREATE OR REPLACE FUNCTION view_balance(p_account_number INTEGER)
RETURNS decimal(19,4) AS $$
DECLARE
    v_balance decimal(19,4);
BEGIN
    SELECT balance INTO v_balance
    FROM account
    WHERE account_number = p_account_number;

    RETURN v_balance;
END;
$$ LANGUAGE plpgsql;

-- Allow the user to apply for a loan
CREATE OR REPLACE FUNCTION apply_for_loan(
    p_account_id INTEGER, 
    p_requested_amount decimal(19,4)
) RETURNS INTEGER AS $$
DECLARE
    v_loan_application_id INTEGER;
BEGIN
    INSERT INTO loan_application (account_id, date, requested_amount, is_approved, approved_amount)
    VALUES (p_account_id, NOW(), p_requested_amount, FALSE, 0)
    RETURNING id INTO v_loan_application_id;
    RETURN v_loan_application_id;
END;
$$ LANGUAGE plpgsql;

-- Function to allow managers to approve loan requests from customers
CREATE OR REPLACE FUNCTION approve_loan(loan_application_id INTEGER)
RETURNS void AS $$
BEGIN
  UPDATE loan_application
  SET is_approved = true,
    approved_amount = requested_amount
  WHERE id = loan_application_id;
END;
$$ LANGUAGE plpgsql;

-- Allow the customer to transfer amount to a different account under the same name
CREATE OR REPLACE FUNCTION transfer_funds(sender_id INTEGER, receiver_id INTEGER, transfer_amount DECIMAL)
RETURNS VOID AS $$
BEGIN
    -- Check if sender and receiver accounts belong to the same customer
    IF (SELECT customer_id FROM account WHERE id = sender_id) != (SELECT customer_id FROM account WHERE id = receiver_id)
    THEN
        RAISE EXCEPTION 'Sender and Receiver accounts must belong to the same customer.';
    END IF;

    -- Check if sender has enough balance to transfer
    IF (SELECT balance FROM account WHERE id = sender_id) < transfer_amount
    THEN
        RAISE EXCEPTION 'Sender account has insufficient balance.';
    END IF;

    -- Update sender's balance
    UPDATE account SET balance = balance - transfer_amount WHERE id = sender_id;

    -- Update receiver's balance
    UPDATE account SET balance = balance + transfer_amount WHERE id = receiver_id;

    -- Insert transfer record
    INSERT INTO transfer(date, customer_id, transfer_type, sender_id, receiver_id, amount)
    VALUES (NOW(), (SELECT customer_id FROM account WHERE id = sender_id), 'Internal', sender_id, receiver_id, transfer_amount);

    -- Commit transaction
    COMMIT;
END;
$$ LANGUAGE plpgsql;
